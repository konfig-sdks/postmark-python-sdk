# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from postmark_python_sdk import schemas  # noqa: F401


class Attachment(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    An attachment for an email message.
    """


    class MetaOapg:
        
        class properties:
            Content = schemas.StrSchema
            ContentID = schemas.StrSchema
            ContentType = schemas.StrSchema
            Name = schemas.StrSchema
            __annotations__ = {
                "Content": Content,
                "ContentID": ContentID,
                "ContentType": ContentType,
                "Name": Name,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Content"]) -> MetaOapg.properties.Content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ContentID"]) -> MetaOapg.properties.ContentID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ContentType"]) -> MetaOapg.properties.ContentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Content", "ContentID", "ContentType", "Name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Content"]) -> typing.Union[MetaOapg.properties.Content, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ContentID"]) -> typing.Union[MetaOapg.properties.ContentID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ContentType"]) -> typing.Union[MetaOapg.properties.ContentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> typing.Union[MetaOapg.properties.Name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Content", "ContentID", "ContentType", "Name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        Content: typing.Union[MetaOapg.properties.Content, str, schemas.Unset] = schemas.unset,
        ContentID: typing.Union[MetaOapg.properties.ContentID, str, schemas.Unset] = schemas.unset,
        ContentType: typing.Union[MetaOapg.properties.ContentType, str, schemas.Unset] = schemas.unset,
        Name: typing.Union[MetaOapg.properties.Name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Attachment':
        return super().__new__(
            cls,
            *args,
            Content=Content,
            ContentID=ContentID,
            ContentType=ContentType,
            Name=Name,
            _configuration=_configuration,
            **kwargs,
        )
