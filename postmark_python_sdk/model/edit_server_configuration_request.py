# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from postmark_python_sdk import schemas  # noqa: F401


class EditServerConfigurationRequest(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            BounceHookUrl = schemas.StrSchema
            ClickHookUrl = schemas.StrSchema
            
            
            class Color(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "purple": "PURPLE",
                        "blue": "BLUE",
                        "turqoise": "TURQOISE",
                        "green": "GREEN",
                        "red": "RED",
                        "yellow": "YELLOW",
                        "grey": "GREY",
                    }
                
                @schemas.classproperty
                def PURPLE(cls):
                    return cls("purple")
                
                @schemas.classproperty
                def BLUE(cls):
                    return cls("blue")
                
                @schemas.classproperty
                def TURQOISE(cls):
                    return cls("turqoise")
                
                @schemas.classproperty
                def GREEN(cls):
                    return cls("green")
                
                @schemas.classproperty
                def RED(cls):
                    return cls("red")
                
                @schemas.classproperty
                def YELLOW(cls):
                    return cls("yellow")
                
                @schemas.classproperty
                def GREY(cls):
                    return cls("grey")
            DeliveryHookUrl = schemas.StrSchema
            InboundDomain = schemas.StrSchema
            InboundHookUrl = schemas.StrSchema
            InboundSpamThreshold = schemas.IntSchema
            Name = schemas.StrSchema
            OpenHookUrl = schemas.StrSchema
            PostFirstOpenOnly = schemas.BoolSchema
            RawEmailEnabled = schemas.BoolSchema
            SmtpApiActivated = schemas.BoolSchema
            
            
            class TrackLinks(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "None": "NONE",
                        "HtmlAndText": "HTML_AND_TEXT",
                        "HtmlOnly": "HTML_ONLY",
                        "TextOnly": "TEXT_ONLY",
                    }
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("None")
                
                @schemas.classproperty
                def HTML_AND_TEXT(cls):
                    return cls("HtmlAndText")
                
                @schemas.classproperty
                def HTML_ONLY(cls):
                    return cls("HtmlOnly")
                
                @schemas.classproperty
                def TEXT_ONLY(cls):
                    return cls("TextOnly")
            TrackOpens = schemas.BoolSchema
            __annotations__ = {
                "BounceHookUrl": BounceHookUrl,
                "ClickHookUrl": ClickHookUrl,
                "Color": Color,
                "DeliveryHookUrl": DeliveryHookUrl,
                "InboundDomain": InboundDomain,
                "InboundHookUrl": InboundHookUrl,
                "InboundSpamThreshold": InboundSpamThreshold,
                "Name": Name,
                "OpenHookUrl": OpenHookUrl,
                "PostFirstOpenOnly": PostFirstOpenOnly,
                "RawEmailEnabled": RawEmailEnabled,
                "SmtpApiActivated": SmtpApiActivated,
                "TrackLinks": TrackLinks,
                "TrackOpens": TrackOpens,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BounceHookUrl"]) -> MetaOapg.properties.BounceHookUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ClickHookUrl"]) -> MetaOapg.properties.ClickHookUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Color"]) -> MetaOapg.properties.Color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DeliveryHookUrl"]) -> MetaOapg.properties.DeliveryHookUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["InboundDomain"]) -> MetaOapg.properties.InboundDomain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["InboundHookUrl"]) -> MetaOapg.properties.InboundHookUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["InboundSpamThreshold"]) -> MetaOapg.properties.InboundSpamThreshold: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OpenHookUrl"]) -> MetaOapg.properties.OpenHookUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PostFirstOpenOnly"]) -> MetaOapg.properties.PostFirstOpenOnly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RawEmailEnabled"]) -> MetaOapg.properties.RawEmailEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SmtpApiActivated"]) -> MetaOapg.properties.SmtpApiActivated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TrackLinks"]) -> MetaOapg.properties.TrackLinks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TrackOpens"]) -> MetaOapg.properties.TrackOpens: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["BounceHookUrl", "ClickHookUrl", "Color", "DeliveryHookUrl", "InboundDomain", "InboundHookUrl", "InboundSpamThreshold", "Name", "OpenHookUrl", "PostFirstOpenOnly", "RawEmailEnabled", "SmtpApiActivated", "TrackLinks", "TrackOpens", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BounceHookUrl"]) -> typing.Union[MetaOapg.properties.BounceHookUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ClickHookUrl"]) -> typing.Union[MetaOapg.properties.ClickHookUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Color"]) -> typing.Union[MetaOapg.properties.Color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DeliveryHookUrl"]) -> typing.Union[MetaOapg.properties.DeliveryHookUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["InboundDomain"]) -> typing.Union[MetaOapg.properties.InboundDomain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["InboundHookUrl"]) -> typing.Union[MetaOapg.properties.InboundHookUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["InboundSpamThreshold"]) -> typing.Union[MetaOapg.properties.InboundSpamThreshold, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> typing.Union[MetaOapg.properties.Name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OpenHookUrl"]) -> typing.Union[MetaOapg.properties.OpenHookUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PostFirstOpenOnly"]) -> typing.Union[MetaOapg.properties.PostFirstOpenOnly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RawEmailEnabled"]) -> typing.Union[MetaOapg.properties.RawEmailEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SmtpApiActivated"]) -> typing.Union[MetaOapg.properties.SmtpApiActivated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TrackLinks"]) -> typing.Union[MetaOapg.properties.TrackLinks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TrackOpens"]) -> typing.Union[MetaOapg.properties.TrackOpens, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["BounceHookUrl", "ClickHookUrl", "Color", "DeliveryHookUrl", "InboundDomain", "InboundHookUrl", "InboundSpamThreshold", "Name", "OpenHookUrl", "PostFirstOpenOnly", "RawEmailEnabled", "SmtpApiActivated", "TrackLinks", "TrackOpens", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        BounceHookUrl: typing.Union[MetaOapg.properties.BounceHookUrl, str, schemas.Unset] = schemas.unset,
        ClickHookUrl: typing.Union[MetaOapg.properties.ClickHookUrl, str, schemas.Unset] = schemas.unset,
        Color: typing.Union[MetaOapg.properties.Color, str, schemas.Unset] = schemas.unset,
        DeliveryHookUrl: typing.Union[MetaOapg.properties.DeliveryHookUrl, str, schemas.Unset] = schemas.unset,
        InboundDomain: typing.Union[MetaOapg.properties.InboundDomain, str, schemas.Unset] = schemas.unset,
        InboundHookUrl: typing.Union[MetaOapg.properties.InboundHookUrl, str, schemas.Unset] = schemas.unset,
        InboundSpamThreshold: typing.Union[MetaOapg.properties.InboundSpamThreshold, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Name: typing.Union[MetaOapg.properties.Name, str, schemas.Unset] = schemas.unset,
        OpenHookUrl: typing.Union[MetaOapg.properties.OpenHookUrl, str, schemas.Unset] = schemas.unset,
        PostFirstOpenOnly: typing.Union[MetaOapg.properties.PostFirstOpenOnly, bool, schemas.Unset] = schemas.unset,
        RawEmailEnabled: typing.Union[MetaOapg.properties.RawEmailEnabled, bool, schemas.Unset] = schemas.unset,
        SmtpApiActivated: typing.Union[MetaOapg.properties.SmtpApiActivated, bool, schemas.Unset] = schemas.unset,
        TrackLinks: typing.Union[MetaOapg.properties.TrackLinks, str, schemas.Unset] = schemas.unset,
        TrackOpens: typing.Union[MetaOapg.properties.TrackOpens, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EditServerConfigurationRequest':
        return super().__new__(
            cls,
            *args,
            BounceHookUrl=BounceHookUrl,
            ClickHookUrl=ClickHookUrl,
            Color=Color,
            DeliveryHookUrl=DeliveryHookUrl,
            InboundDomain=InboundDomain,
            InboundHookUrl=InboundHookUrl,
            InboundSpamThreshold=InboundSpamThreshold,
            Name=Name,
            OpenHookUrl=OpenHookUrl,
            PostFirstOpenOnly=PostFirstOpenOnly,
            RawEmailEnabled=RawEmailEnabled,
            SmtpApiActivated=SmtpApiActivated,
            TrackLinks=TrackLinks,
            TrackOpens=TrackOpens,
            _configuration=_configuration,
            **kwargs,
        )
