# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from postmark_python_sdk import schemas  # noqa: F401


class ExtendedMessageClickEventInformation(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            ClickLocation = schemas.StrSchema
            
            
            class Client(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Company = schemas.StrSchema
                        Family = schemas.StrSchema
                        Name = schemas.StrSchema
                        __annotations__ = {
                            "Company": Company,
                            "Family": Family,
                            "Name": Name,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Company"]) -> MetaOapg.properties.Company: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Family"]) -> MetaOapg.properties.Family: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Company", "Family", "Name", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Company"]) -> typing.Union[MetaOapg.properties.Company, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Family"]) -> typing.Union[MetaOapg.properties.Family, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> typing.Union[MetaOapg.properties.Name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Company", "Family", "Name", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    Company: typing.Union[MetaOapg.properties.Company, str, schemas.Unset] = schemas.unset,
                    Family: typing.Union[MetaOapg.properties.Family, str, schemas.Unset] = schemas.unset,
                    Name: typing.Union[MetaOapg.properties.Name, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Client':
                    return super().__new__(
                        cls,
                        *args,
                        Company=Company,
                        Family=Family,
                        Name=Name,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Geo(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        City = schemas.StrSchema
                        Coords = schemas.StrSchema
                        Country = schemas.StrSchema
                        CountryISOCode = schemas.StrSchema
                        IP = schemas.StrSchema
                        Region = schemas.StrSchema
                        RegionISOCode = schemas.StrSchema
                        Zip = schemas.StrSchema
                        __annotations__ = {
                            "City": City,
                            "Coords": Coords,
                            "Country": Country,
                            "CountryISOCode": CountryISOCode,
                            "IP": IP,
                            "Region": Region,
                            "RegionISOCode": RegionISOCode,
                            "Zip": Zip,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["City"]) -> MetaOapg.properties.City: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Coords"]) -> MetaOapg.properties.Coords: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Country"]) -> MetaOapg.properties.Country: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["CountryISOCode"]) -> MetaOapg.properties.CountryISOCode: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["IP"]) -> MetaOapg.properties.IP: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Region"]) -> MetaOapg.properties.Region: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["RegionISOCode"]) -> MetaOapg.properties.RegionISOCode: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Zip"]) -> MetaOapg.properties.Zip: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["City", "Coords", "Country", "CountryISOCode", "IP", "Region", "RegionISOCode", "Zip", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["City"]) -> typing.Union[MetaOapg.properties.City, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Coords"]) -> typing.Union[MetaOapg.properties.Coords, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Country"]) -> typing.Union[MetaOapg.properties.Country, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["CountryISOCode"]) -> typing.Union[MetaOapg.properties.CountryISOCode, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["IP"]) -> typing.Union[MetaOapg.properties.IP, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Region"]) -> typing.Union[MetaOapg.properties.Region, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["RegionISOCode"]) -> typing.Union[MetaOapg.properties.RegionISOCode, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Zip"]) -> typing.Union[MetaOapg.properties.Zip, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["City", "Coords", "Country", "CountryISOCode", "IP", "Region", "RegionISOCode", "Zip", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    City: typing.Union[MetaOapg.properties.City, str, schemas.Unset] = schemas.unset,
                    Coords: typing.Union[MetaOapg.properties.Coords, str, schemas.Unset] = schemas.unset,
                    Country: typing.Union[MetaOapg.properties.Country, str, schemas.Unset] = schemas.unset,
                    CountryISOCode: typing.Union[MetaOapg.properties.CountryISOCode, str, schemas.Unset] = schemas.unset,
                    IP: typing.Union[MetaOapg.properties.IP, str, schemas.Unset] = schemas.unset,
                    Region: typing.Union[MetaOapg.properties.Region, str, schemas.Unset] = schemas.unset,
                    RegionISOCode: typing.Union[MetaOapg.properties.RegionISOCode, str, schemas.Unset] = schemas.unset,
                    Zip: typing.Union[MetaOapg.properties.Zip, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Geo':
                    return super().__new__(
                        cls,
                        *args,
                        City=City,
                        Coords=Coords,
                        Country=Country,
                        CountryISOCode=CountryISOCode,
                        IP=IP,
                        Region=Region,
                        RegionISOCode=RegionISOCode,
                        Zip=Zip,
                        _configuration=_configuration,
                        **kwargs,
                    )
            MessageID = schemas.StrSchema
            
            
            class OS(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Company = schemas.StrSchema
                        Family = schemas.StrSchema
                        Name = schemas.StrSchema
                        __annotations__ = {
                            "Company": Company,
                            "Family": Family,
                            "Name": Name,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Company"]) -> MetaOapg.properties.Company: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Family"]) -> MetaOapg.properties.Family: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Company", "Family", "Name", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Company"]) -> typing.Union[MetaOapg.properties.Company, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Family"]) -> typing.Union[MetaOapg.properties.Family, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> typing.Union[MetaOapg.properties.Name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Company", "Family", "Name", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    Company: typing.Union[MetaOapg.properties.Company, str, schemas.Unset] = schemas.unset,
                    Family: typing.Union[MetaOapg.properties.Family, str, schemas.Unset] = schemas.unset,
                    Name: typing.Union[MetaOapg.properties.Name, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'OS':
                    return super().__new__(
                        cls,
                        *args,
                        Company=Company,
                        Family=Family,
                        Name=Name,
                        _configuration=_configuration,
                        **kwargs,
                    )
            OriginalLink = schemas.StrSchema
            Platform = schemas.StrSchema
            ReceivedAt = schemas.DateTimeSchema
            Recipient = schemas.StrSchema
            Tag = schemas.StrSchema
            UserAgent = schemas.StrSchema
            __annotations__ = {
                "ClickLocation": ClickLocation,
                "Client": Client,
                "Geo": Geo,
                "MessageID": MessageID,
                "OS": OS,
                "OriginalLink": OriginalLink,
                "Platform": Platform,
                "ReceivedAt": ReceivedAt,
                "Recipient": Recipient,
                "Tag": Tag,
                "UserAgent": UserAgent,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ClickLocation"]) -> MetaOapg.properties.ClickLocation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Client"]) -> MetaOapg.properties.Client: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Geo"]) -> MetaOapg.properties.Geo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MessageID"]) -> MetaOapg.properties.MessageID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OS"]) -> MetaOapg.properties.OS: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OriginalLink"]) -> MetaOapg.properties.OriginalLink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Platform"]) -> MetaOapg.properties.Platform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReceivedAt"]) -> MetaOapg.properties.ReceivedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Recipient"]) -> MetaOapg.properties.Recipient: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Tag"]) -> MetaOapg.properties.Tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UserAgent"]) -> MetaOapg.properties.UserAgent: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ClickLocation", "Client", "Geo", "MessageID", "OS", "OriginalLink", "Platform", "ReceivedAt", "Recipient", "Tag", "UserAgent", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ClickLocation"]) -> typing.Union[MetaOapg.properties.ClickLocation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Client"]) -> typing.Union[MetaOapg.properties.Client, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Geo"]) -> typing.Union[MetaOapg.properties.Geo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MessageID"]) -> typing.Union[MetaOapg.properties.MessageID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OS"]) -> typing.Union[MetaOapg.properties.OS, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OriginalLink"]) -> typing.Union[MetaOapg.properties.OriginalLink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Platform"]) -> typing.Union[MetaOapg.properties.Platform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReceivedAt"]) -> typing.Union[MetaOapg.properties.ReceivedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Recipient"]) -> typing.Union[MetaOapg.properties.Recipient, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Tag"]) -> typing.Union[MetaOapg.properties.Tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UserAgent"]) -> typing.Union[MetaOapg.properties.UserAgent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ClickLocation", "Client", "Geo", "MessageID", "OS", "OriginalLink", "Platform", "ReceivedAt", "Recipient", "Tag", "UserAgent", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        ClickLocation: typing.Union[MetaOapg.properties.ClickLocation, str, schemas.Unset] = schemas.unset,
        Client: typing.Union[MetaOapg.properties.Client, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        Geo: typing.Union[MetaOapg.properties.Geo, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        MessageID: typing.Union[MetaOapg.properties.MessageID, str, schemas.Unset] = schemas.unset,
        OS: typing.Union[MetaOapg.properties.OS, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        OriginalLink: typing.Union[MetaOapg.properties.OriginalLink, str, schemas.Unset] = schemas.unset,
        Platform: typing.Union[MetaOapg.properties.Platform, str, schemas.Unset] = schemas.unset,
        ReceivedAt: typing.Union[MetaOapg.properties.ReceivedAt, str, datetime, schemas.Unset] = schemas.unset,
        Recipient: typing.Union[MetaOapg.properties.Recipient, str, schemas.Unset] = schemas.unset,
        Tag: typing.Union[MetaOapg.properties.Tag, str, schemas.Unset] = schemas.unset,
        UserAgent: typing.Union[MetaOapg.properties.UserAgent, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExtendedMessageClickEventInformation':
        return super().__new__(
            cls,
            *args,
            ClickLocation=ClickLocation,
            Client=Client,
            Geo=Geo,
            MessageID=MessageID,
            OS=OS,
            OriginalLink=OriginalLink,
            Platform=Platform,
            ReceivedAt=ReceivedAt,
            Recipient=Recipient,
            Tag=Tag,
            UserAgent=UserAgent,
            _configuration=_configuration,
            **kwargs,
        )
