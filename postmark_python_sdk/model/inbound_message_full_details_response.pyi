# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from postmark_python_sdk import schemas  # noqa: F401


class InboundMessageFullDetailsResponse(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def Attachments() -> typing.Type['AttachmentCollection']:
                return AttachmentCollection
            BlockedReason = schemas.StrSchema
            Cc = schemas.StrSchema
            
            
            class CcFull(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EmailNameAddressPair']:
                        return EmailNameAddressPair
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EmailNameAddressPair'], typing.List['EmailNameAddressPair']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'CcFull':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EmailNameAddressPair':
                    return super().__getitem__(i)
            Date = schemas.StrSchema
            _from = schemas.StrSchema
            
            
            class FromFull(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Email = schemas.StrSchema
                        Name = schemas.StrSchema
                        __annotations__ = {
                            "Email": Email,
                            "Name": Name,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Email"]) -> MetaOapg.properties.Email: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Email", "Name", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Email"]) -> typing.Union[MetaOapg.properties.Email, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> typing.Union[MetaOapg.properties.Name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Email", "Name", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    Email: typing.Union[MetaOapg.properties.Email, str, schemas.Unset] = schemas.unset,
                    Name: typing.Union[MetaOapg.properties.Name, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'FromFull':
                    return super().__new__(
                        cls,
                        *args,
                        Email=Email,
                        Name=Name,
                        _configuration=_configuration,
                        **kwargs,
                    )
            FromName = schemas.StrSchema
        
            @staticmethod
            def Headers() -> typing.Type['HeaderCollection']:
                return HeaderCollection
            HtmlBody = schemas.StrSchema
            MailboxHash = schemas.StrSchema
            MessageID = schemas.StrSchema
            OriginalRecipient = schemas.StrSchema
            ReplyTo = schemas.StrSchema
            Status = schemas.StrSchema
            Subject = schemas.StrSchema
            Tag = schemas.StrSchema
            TextBody = schemas.StrSchema
            To = schemas.StrSchema
            
            
            class ToFull(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EmailNameAddressPair']:
                        return EmailNameAddressPair
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EmailNameAddressPair'], typing.List['EmailNameAddressPair']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ToFull':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EmailNameAddressPair':
                    return super().__getitem__(i)
            __annotations__ = {
                "Attachments": Attachments,
                "BlockedReason": BlockedReason,
                "Cc": Cc,
                "CcFull": CcFull,
                "Date": Date,
                "From": _from,
                "FromFull": FromFull,
                "FromName": FromName,
                "Headers": Headers,
                "HtmlBody": HtmlBody,
                "MailboxHash": MailboxHash,
                "MessageID": MessageID,
                "OriginalRecipient": OriginalRecipient,
                "ReplyTo": ReplyTo,
                "Status": Status,
                "Subject": Subject,
                "Tag": Tag,
                "TextBody": TextBody,
                "To": To,
                "ToFull": ToFull,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Attachments"]) -> 'AttachmentCollection': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BlockedReason"]) -> MetaOapg.properties.BlockedReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Cc"]) -> MetaOapg.properties.Cc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CcFull"]) -> MetaOapg.properties.CcFull: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Date"]) -> MetaOapg.properties.Date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["From"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FromFull"]) -> MetaOapg.properties.FromFull: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FromName"]) -> MetaOapg.properties.FromName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Headers"]) -> 'HeaderCollection': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["HtmlBody"]) -> MetaOapg.properties.HtmlBody: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MailboxHash"]) -> MetaOapg.properties.MailboxHash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MessageID"]) -> MetaOapg.properties.MessageID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OriginalRecipient"]) -> MetaOapg.properties.OriginalRecipient: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReplyTo"]) -> MetaOapg.properties.ReplyTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Status"]) -> MetaOapg.properties.Status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Subject"]) -> MetaOapg.properties.Subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Tag"]) -> MetaOapg.properties.Tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TextBody"]) -> MetaOapg.properties.TextBody: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["To"]) -> MetaOapg.properties.To: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ToFull"]) -> MetaOapg.properties.ToFull: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Attachments", "BlockedReason", "Cc", "CcFull", "Date", "From", "FromFull", "FromName", "Headers", "HtmlBody", "MailboxHash", "MessageID", "OriginalRecipient", "ReplyTo", "Status", "Subject", "Tag", "TextBody", "To", "ToFull", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Attachments"]) -> typing.Union['AttachmentCollection', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BlockedReason"]) -> typing.Union[MetaOapg.properties.BlockedReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Cc"]) -> typing.Union[MetaOapg.properties.Cc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CcFull"]) -> typing.Union[MetaOapg.properties.CcFull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Date"]) -> typing.Union[MetaOapg.properties.Date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["From"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FromFull"]) -> typing.Union[MetaOapg.properties.FromFull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FromName"]) -> typing.Union[MetaOapg.properties.FromName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Headers"]) -> typing.Union['HeaderCollection', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["HtmlBody"]) -> typing.Union[MetaOapg.properties.HtmlBody, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MailboxHash"]) -> typing.Union[MetaOapg.properties.MailboxHash, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MessageID"]) -> typing.Union[MetaOapg.properties.MessageID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OriginalRecipient"]) -> typing.Union[MetaOapg.properties.OriginalRecipient, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReplyTo"]) -> typing.Union[MetaOapg.properties.ReplyTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> typing.Union[MetaOapg.properties.Status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Subject"]) -> typing.Union[MetaOapg.properties.Subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Tag"]) -> typing.Union[MetaOapg.properties.Tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TextBody"]) -> typing.Union[MetaOapg.properties.TextBody, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["To"]) -> typing.Union[MetaOapg.properties.To, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ToFull"]) -> typing.Union[MetaOapg.properties.ToFull, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Attachments", "BlockedReason", "Cc", "CcFull", "Date", "From", "FromFull", "FromName", "Headers", "HtmlBody", "MailboxHash", "MessageID", "OriginalRecipient", "ReplyTo", "Status", "Subject", "Tag", "TextBody", "To", "ToFull", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        Attachments: typing.Union['AttachmentCollection', schemas.Unset] = schemas.unset,
        BlockedReason: typing.Union[MetaOapg.properties.BlockedReason, str, schemas.Unset] = schemas.unset,
        Cc: typing.Union[MetaOapg.properties.Cc, str, schemas.Unset] = schemas.unset,
        CcFull: typing.Union[MetaOapg.properties.CcFull, list, tuple, schemas.Unset] = schemas.unset,
        Date: typing.Union[MetaOapg.properties.Date, str, schemas.Unset] = schemas.unset,
        FromFull: typing.Union[MetaOapg.properties.FromFull, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        FromName: typing.Union[MetaOapg.properties.FromName, str, schemas.Unset] = schemas.unset,
        Headers: typing.Union['HeaderCollection', schemas.Unset] = schemas.unset,
        HtmlBody: typing.Union[MetaOapg.properties.HtmlBody, str, schemas.Unset] = schemas.unset,
        MailboxHash: typing.Union[MetaOapg.properties.MailboxHash, str, schemas.Unset] = schemas.unset,
        MessageID: typing.Union[MetaOapg.properties.MessageID, str, schemas.Unset] = schemas.unset,
        OriginalRecipient: typing.Union[MetaOapg.properties.OriginalRecipient, str, schemas.Unset] = schemas.unset,
        ReplyTo: typing.Union[MetaOapg.properties.ReplyTo, str, schemas.Unset] = schemas.unset,
        Status: typing.Union[MetaOapg.properties.Status, str, schemas.Unset] = schemas.unset,
        Subject: typing.Union[MetaOapg.properties.Subject, str, schemas.Unset] = schemas.unset,
        Tag: typing.Union[MetaOapg.properties.Tag, str, schemas.Unset] = schemas.unset,
        TextBody: typing.Union[MetaOapg.properties.TextBody, str, schemas.Unset] = schemas.unset,
        To: typing.Union[MetaOapg.properties.To, str, schemas.Unset] = schemas.unset,
        ToFull: typing.Union[MetaOapg.properties.ToFull, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InboundMessageFullDetailsResponse':
        return super().__new__(
            cls,
            *args,
            Attachments=Attachments,
            BlockedReason=BlockedReason,
            Cc=Cc,
            CcFull=CcFull,
            Date=Date,
            FromFull=FromFull,
            FromName=FromName,
            Headers=Headers,
            HtmlBody=HtmlBody,
            MailboxHash=MailboxHash,
            MessageID=MessageID,
            OriginalRecipient=OriginalRecipient,
            ReplyTo=ReplyTo,
            Status=Status,
            Subject=Subject,
            Tag=Tag,
            TextBody=TextBody,
            To=To,
            ToFull=ToFull,
            _configuration=_configuration,
            **kwargs,
        )

from postmark_python_sdk.model.attachment_collection import AttachmentCollection
from postmark_python_sdk.model.email_name_address_pair import EmailNameAddressPair
from postmark_python_sdk.model.header_collection import HeaderCollection
