# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from postmark_python_sdk import schemas  # noqa: F401


class MessageEventDetails(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class Details(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        BounceID = schemas.StrSchema
                        DeliveryMessage = schemas.StrSchema
                        DestinationIP = schemas.StrSchema
                        DestinationServer = schemas.StrSchema
                        Summary = schemas.StrSchema
                        __annotations__ = {
                            "BounceID": BounceID,
                            "DeliveryMessage": DeliveryMessage,
                            "DestinationIP": DestinationIP,
                            "DestinationServer": DestinationServer,
                            "Summary": Summary,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["BounceID"]) -> MetaOapg.properties.BounceID: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["DeliveryMessage"]) -> MetaOapg.properties.DeliveryMessage: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["DestinationIP"]) -> MetaOapg.properties.DestinationIP: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["DestinationServer"]) -> MetaOapg.properties.DestinationServer: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Summary"]) -> MetaOapg.properties.Summary: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["BounceID", "DeliveryMessage", "DestinationIP", "DestinationServer", "Summary", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["BounceID"]) -> typing.Union[MetaOapg.properties.BounceID, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["DeliveryMessage"]) -> typing.Union[MetaOapg.properties.DeliveryMessage, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["DestinationIP"]) -> typing.Union[MetaOapg.properties.DestinationIP, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["DestinationServer"]) -> typing.Union[MetaOapg.properties.DestinationServer, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Summary"]) -> typing.Union[MetaOapg.properties.Summary, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["BounceID", "DeliveryMessage", "DestinationIP", "DestinationServer", "Summary", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    BounceID: typing.Union[MetaOapg.properties.BounceID, str, schemas.Unset] = schemas.unset,
                    DeliveryMessage: typing.Union[MetaOapg.properties.DeliveryMessage, str, schemas.Unset] = schemas.unset,
                    DestinationIP: typing.Union[MetaOapg.properties.DestinationIP, str, schemas.Unset] = schemas.unset,
                    DestinationServer: typing.Union[MetaOapg.properties.DestinationServer, str, schemas.Unset] = schemas.unset,
                    Summary: typing.Union[MetaOapg.properties.Summary, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Details':
                    return super().__new__(
                        cls,
                        *args,
                        BounceID=BounceID,
                        DeliveryMessage=DeliveryMessage,
                        DestinationIP=DestinationIP,
                        DestinationServer=DestinationServer,
                        Summary=Summary,
                        _configuration=_configuration,
                        **kwargs,
                    )
            ReceivedAt = schemas.DateTimeSchema
            Recipient = schemas.StrSchema
            Type = schemas.StrSchema
            __annotations__ = {
                "Details": Details,
                "ReceivedAt": ReceivedAt,
                "Recipient": Recipient,
                "Type": Type,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Details"]) -> MetaOapg.properties.Details: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReceivedAt"]) -> MetaOapg.properties.ReceivedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Recipient"]) -> MetaOapg.properties.Recipient: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> MetaOapg.properties.Type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Details", "ReceivedAt", "Recipient", "Type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Details"]) -> typing.Union[MetaOapg.properties.Details, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReceivedAt"]) -> typing.Union[MetaOapg.properties.ReceivedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Recipient"]) -> typing.Union[MetaOapg.properties.Recipient, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> typing.Union[MetaOapg.properties.Type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Details", "ReceivedAt", "Recipient", "Type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        Details: typing.Union[MetaOapg.properties.Details, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        ReceivedAt: typing.Union[MetaOapg.properties.ReceivedAt, str, datetime, schemas.Unset] = schemas.unset,
        Recipient: typing.Union[MetaOapg.properties.Recipient, str, schemas.Unset] = schemas.unset,
        Type: typing.Union[MetaOapg.properties.Type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MessageEventDetails':
        return super().__new__(
            cls,
            *args,
            Details=Details,
            ReceivedAt=ReceivedAt,
            Recipient=Recipient,
            Type=Type,
            _configuration=_configuration,
            **kwargs,
        )
