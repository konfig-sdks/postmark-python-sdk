# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from postmark_python_sdk import schemas  # noqa: F401


class OutboundMessageDetail(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def Attachments() -> typing.Type['AttachmentCollection']:
                return AttachmentCollection
            
            
            class Bcc(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EmailNameAddressPair']:
                        return EmailNameAddressPair
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EmailNameAddressPair'], typing.List['EmailNameAddressPair']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Bcc':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EmailNameAddressPair':
                    return super().__getitem__(i)
            
            
            class Cc(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EmailNameAddressPair']:
                        return EmailNameAddressPair
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EmailNameAddressPair'], typing.List['EmailNameAddressPair']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Cc':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EmailNameAddressPair':
                    return super().__getitem__(i)
            _from = schemas.StrSchema
            MessageID = schemas.StrSchema
            ReceivedAt = schemas.DateTimeSchema
            
            
            class Recipients(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Recipients':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            Status = schemas.StrSchema
            Subject = schemas.StrSchema
            Tag = schemas.StrSchema
            
            
            class To(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EmailNameAddressPair']:
                        return EmailNameAddressPair
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EmailNameAddressPair'], typing.List['EmailNameAddressPair']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'To':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EmailNameAddressPair':
                    return super().__getitem__(i)
            
            
            class TrackLinks(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("None")
                
                @schemas.classproperty
                def HTML_AND_TEXT(cls):
                    return cls("HtmlAndText")
                
                @schemas.classproperty
                def HTML_ONLY(cls):
                    return cls("HtmlOnly")
                
                @schemas.classproperty
                def TEXT_ONLY(cls):
                    return cls("TextOnly")
            TrackOpens = schemas.BoolSchema
            __annotations__ = {
                "Attachments": Attachments,
                "Bcc": Bcc,
                "Cc": Cc,
                "From": _from,
                "MessageID": MessageID,
                "ReceivedAt": ReceivedAt,
                "Recipients": Recipients,
                "Status": Status,
                "Subject": Subject,
                "Tag": Tag,
                "To": To,
                "TrackLinks": TrackLinks,
                "TrackOpens": TrackOpens,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Attachments"]) -> 'AttachmentCollection': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Bcc"]) -> MetaOapg.properties.Bcc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Cc"]) -> MetaOapg.properties.Cc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["From"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MessageID"]) -> MetaOapg.properties.MessageID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReceivedAt"]) -> MetaOapg.properties.ReceivedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Recipients"]) -> MetaOapg.properties.Recipients: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Status"]) -> MetaOapg.properties.Status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Subject"]) -> MetaOapg.properties.Subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Tag"]) -> MetaOapg.properties.Tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["To"]) -> MetaOapg.properties.To: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TrackLinks"]) -> MetaOapg.properties.TrackLinks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TrackOpens"]) -> MetaOapg.properties.TrackOpens: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Attachments", "Bcc", "Cc", "From", "MessageID", "ReceivedAt", "Recipients", "Status", "Subject", "Tag", "To", "TrackLinks", "TrackOpens", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Attachments"]) -> typing.Union['AttachmentCollection', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Bcc"]) -> typing.Union[MetaOapg.properties.Bcc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Cc"]) -> typing.Union[MetaOapg.properties.Cc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["From"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MessageID"]) -> typing.Union[MetaOapg.properties.MessageID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReceivedAt"]) -> typing.Union[MetaOapg.properties.ReceivedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Recipients"]) -> typing.Union[MetaOapg.properties.Recipients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> typing.Union[MetaOapg.properties.Status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Subject"]) -> typing.Union[MetaOapg.properties.Subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Tag"]) -> typing.Union[MetaOapg.properties.Tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["To"]) -> typing.Union[MetaOapg.properties.To, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TrackLinks"]) -> typing.Union[MetaOapg.properties.TrackLinks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TrackOpens"]) -> typing.Union[MetaOapg.properties.TrackOpens, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Attachments", "Bcc", "Cc", "From", "MessageID", "ReceivedAt", "Recipients", "Status", "Subject", "Tag", "To", "TrackLinks", "TrackOpens", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        Attachments: typing.Union['AttachmentCollection', schemas.Unset] = schemas.unset,
        Bcc: typing.Union[MetaOapg.properties.Bcc, list, tuple, schemas.Unset] = schemas.unset,
        Cc: typing.Union[MetaOapg.properties.Cc, list, tuple, schemas.Unset] = schemas.unset,
        MessageID: typing.Union[MetaOapg.properties.MessageID, str, schemas.Unset] = schemas.unset,
        ReceivedAt: typing.Union[MetaOapg.properties.ReceivedAt, str, datetime, schemas.Unset] = schemas.unset,
        Recipients: typing.Union[MetaOapg.properties.Recipients, list, tuple, schemas.Unset] = schemas.unset,
        Status: typing.Union[MetaOapg.properties.Status, str, schemas.Unset] = schemas.unset,
        Subject: typing.Union[MetaOapg.properties.Subject, str, schemas.Unset] = schemas.unset,
        Tag: typing.Union[MetaOapg.properties.Tag, str, schemas.Unset] = schemas.unset,
        To: typing.Union[MetaOapg.properties.To, list, tuple, schemas.Unset] = schemas.unset,
        TrackLinks: typing.Union[MetaOapg.properties.TrackLinks, str, schemas.Unset] = schemas.unset,
        TrackOpens: typing.Union[MetaOapg.properties.TrackOpens, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OutboundMessageDetail':
        return super().__new__(
            cls,
            *args,
            Attachments=Attachments,
            Bcc=Bcc,
            Cc=Cc,
            MessageID=MessageID,
            ReceivedAt=ReceivedAt,
            Recipients=Recipients,
            Status=Status,
            Subject=Subject,
            Tag=Tag,
            To=To,
            TrackLinks=TrackLinks,
            TrackOpens=TrackOpens,
            _configuration=_configuration,
            **kwargs,
        )

from postmark_python_sdk.model.attachment_collection import AttachmentCollection
from postmark_python_sdk.model.email_name_address_pair import EmailNameAddressPair
