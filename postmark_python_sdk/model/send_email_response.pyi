# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from postmark_python_sdk import schemas  # noqa: F401


class SendEmailResponse(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The standard response when a postmark message is sent
    """


    class MetaOapg:
        
        class properties:
            ErrorCode = schemas.IntSchema
            Message = schemas.StrSchema
            MessageID = schemas.StrSchema
            SubmittedAt = schemas.DateTimeSchema
            To = schemas.StrSchema
            __annotations__ = {
                "ErrorCode": ErrorCode,
                "Message": Message,
                "MessageID": MessageID,
                "SubmittedAt": SubmittedAt,
                "To": To,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ErrorCode"]) -> MetaOapg.properties.ErrorCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Message"]) -> MetaOapg.properties.Message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MessageID"]) -> MetaOapg.properties.MessageID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SubmittedAt"]) -> MetaOapg.properties.SubmittedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["To"]) -> MetaOapg.properties.To: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ErrorCode", "Message", "MessageID", "SubmittedAt", "To", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ErrorCode"]) -> typing.Union[MetaOapg.properties.ErrorCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Message"]) -> typing.Union[MetaOapg.properties.Message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MessageID"]) -> typing.Union[MetaOapg.properties.MessageID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SubmittedAt"]) -> typing.Union[MetaOapg.properties.SubmittedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["To"]) -> typing.Union[MetaOapg.properties.To, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ErrorCode", "Message", "MessageID", "SubmittedAt", "To", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        ErrorCode: typing.Union[MetaOapg.properties.ErrorCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Message: typing.Union[MetaOapg.properties.Message, str, schemas.Unset] = schemas.unset,
        MessageID: typing.Union[MetaOapg.properties.MessageID, str, schemas.Unset] = schemas.unset,
        SubmittedAt: typing.Union[MetaOapg.properties.SubmittedAt, str, datetime, schemas.Unset] = schemas.unset,
        To: typing.Union[MetaOapg.properties.To, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SendEmailResponse':
        return super().__new__(
            cls,
            *args,
            ErrorCode=ErrorCode,
            Message=Message,
            MessageID=MessageID,
            SubmittedAt=SubmittedAt,
            To=To,
            _configuration=_configuration,
            **kwargs,
        )
