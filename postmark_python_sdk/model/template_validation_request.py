# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from postmark_python_sdk import schemas  # noqa: F401


class TemplateValidationRequest(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            HtmlBody = schemas.StrSchema
            InlineCssForHtmlTestRender = schemas.BoolSchema
            Subject = schemas.StrSchema
            TestRenderModel = schemas.DictSchema
            TextBody = schemas.StrSchema
            __annotations__ = {
                "HtmlBody": HtmlBody,
                "InlineCssForHtmlTestRender": InlineCssForHtmlTestRender,
                "Subject": Subject,
                "TestRenderModel": TestRenderModel,
                "TextBody": TextBody,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["HtmlBody"]) -> MetaOapg.properties.HtmlBody: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["InlineCssForHtmlTestRender"]) -> MetaOapg.properties.InlineCssForHtmlTestRender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Subject"]) -> MetaOapg.properties.Subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TestRenderModel"]) -> MetaOapg.properties.TestRenderModel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TextBody"]) -> MetaOapg.properties.TextBody: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["HtmlBody", "InlineCssForHtmlTestRender", "Subject", "TestRenderModel", "TextBody", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["HtmlBody"]) -> typing.Union[MetaOapg.properties.HtmlBody, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["InlineCssForHtmlTestRender"]) -> typing.Union[MetaOapg.properties.InlineCssForHtmlTestRender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Subject"]) -> typing.Union[MetaOapg.properties.Subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TestRenderModel"]) -> typing.Union[MetaOapg.properties.TestRenderModel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TextBody"]) -> typing.Union[MetaOapg.properties.TextBody, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["HtmlBody", "InlineCssForHtmlTestRender", "Subject", "TestRenderModel", "TextBody", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        HtmlBody: typing.Union[MetaOapg.properties.HtmlBody, str, schemas.Unset] = schemas.unset,
        InlineCssForHtmlTestRender: typing.Union[MetaOapg.properties.InlineCssForHtmlTestRender, bool, schemas.Unset] = schemas.unset,
        Subject: typing.Union[MetaOapg.properties.Subject, str, schemas.Unset] = schemas.unset,
        TestRenderModel: typing.Union[MetaOapg.properties.TestRenderModel, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        TextBody: typing.Union[MetaOapg.properties.TextBody, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TemplateValidationRequest':
        return super().__new__(
            cls,
            *args,
            HtmlBody=HtmlBody,
            InlineCssForHtmlTestRender=InlineCssForHtmlTestRender,
            Subject=Subject,
            TestRenderModel=TestRenderModel,
            TextBody=TextBody,
            _configuration=_configuration,
            **kwargs,
        )
