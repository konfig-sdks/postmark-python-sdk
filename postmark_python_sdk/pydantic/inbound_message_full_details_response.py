# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from postmark_python_sdk.pydantic.attachment_collection import AttachmentCollection
from postmark_python_sdk.pydantic.email_name_address_pair import EmailNameAddressPair
from postmark_python_sdk.pydantic.header_collection import HeaderCollection

class InboundMessageFullDetailsResponse(BaseModel):
    attachments: typing.Optional[AttachmentCollection] = Field(None, alias='Attachments')

    blocked_reason: typing.Optional[str] = Field(None, alias='BlockedReason')

    cc: typing.Optional[str] = Field(None, alias='Cc')

    cc_full: typing.Optional[typing.List[EmailNameAddressPair]] = Field(None, alias='CcFull')

    date: typing.Optional[str] = Field(None, alias='Date')

    from_: typing.Optional[str] = Field(None, alias='From')

    from_full: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='FromFull')

    from_name: typing.Optional[str] = Field(None, alias='FromName')

    headers: typing.Optional[HeaderCollection] = Field(None, alias='Headers')

    html_body: typing.Optional[str] = Field(None, alias='HtmlBody')

    mailbox_hash: typing.Optional[str] = Field(None, alias='MailboxHash')

    message_i_d: typing.Optional[str] = Field(None, alias='MessageID')

    original_recipient: typing.Optional[str] = Field(None, alias='OriginalRecipient')

    reply_to: typing.Optional[str] = Field(None, alias='ReplyTo')

    status: typing.Optional[str] = Field(None, alias='Status')

    subject: typing.Optional[str] = Field(None, alias='Subject')

    tag: typing.Optional[str] = Field(None, alias='Tag')

    text_body: typing.Optional[str] = Field(None, alias='TextBody')

    to: typing.Optional[str] = Field(None, alias='To')

    to_full: typing.Optional[typing.List[EmailNameAddressPair]] = Field(None, alias='ToFull')
    class Config:
        arbitrary_types_allowed = True
